/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if (head == NULL || k == 1) return head;

        ListNode *dummy = new ListNode(0);
        dummy->next = head;
        ListNode *prevGroupEnd = dummy, *current = head;
        int nodeCount = 0;

        // First, count the total number of nodes in the list
        while (current != NULL) {
            nodeCount++;
            current = current->next;
        }

        // Iterate over the list, reversing every k-group
        current = head;
        while (nodeCount >= k) {
            ListNode *groupStart = current;
            ListNode *prev = NULL;
            ListNode *next = NULL;
            
            // Reverse k nodes
            for (int i = 0; i < k; ++i) {
                next = current->next;
                current->next = prev;
                prev = current;
                current = next;
            }

            // Link the reversed group with the previous part of the list
            prevGroupEnd->next = prev;
            groupStart->next = current;
            prevGroupEnd = groupStart;

            // Decrement the remaining node count
            nodeCount -= k;
        }

        return dummy->next;
    }
};
