/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<int,vector<int>> mp;
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        if(!root) return {};
        vector<vector<int>> ans;
        queue<pair<TreeNode* ,int>> visited;
        visited.push({root,0});
        visited.push({nullptr,0});
        recursue(visited);
        for(auto it:mp){
            ans.push_back(it.second);
        }
        return ans;
    }
    void recursue(queue<pair<TreeNode*,int>>& visited){
        vector<pair<int,int>> curr;
        while(!visited.empty()){
            pair<TreeNode*,int> currp = visited.front();visited.pop();
            if(currp.first){
                curr.push_back({currp.first->val,currp.second});
                if(currp.first->left) visited.push({currp.first->left,currp.second-1});
                if(currp.first->right) visited.push({currp.first->right,currp.second+1});

            }else{
                if(!visited.empty()) visited.push({nullptr,0});
                sort(curr.begin(),curr.end());
                for(auto it:curr){
                    mp[it.second].push_back(it.first);
                }
                curr.clear();
            }
        }
        return;
    }
};
