class Solution{
  public:
  bool canPartition(int index, vector<int>& a, vector<bool>& visited, int k, int current_sum, int target_sum) {
    if (k == 1) return true;  // If only one subset remains, it must be possible
    if (current_sum == target_sum)  // Current subset is full, move to the next one
        return canPartition(0, a, visited, k - 1, 0, target_sum);

    for (int i = index; i < a.size(); i++) {
        if (!visited[i] && current_sum + a[i] <= target_sum) {
            visited[i] = true;
            if (canPartition(i + 1, a, visited, k, current_sum + a[i], target_sum))
                return true;
            visited[i] = false;  // Backtrack
        }
    }
    return false;
}
    bool isKPartitionPossible(int ab[], int n, int k)
    {
         //Your code here
         vector<int> a(n);
         for(int i=0;i<n;i++){
             a[i]=ab[i];
         }
         int total_sum = accumulate(a.begin(), a.end(), 0);
    if (total_sum % k != 0) return false;  // Cannot partition if not divisible

    int target_sum = total_sum / k;
    sort(a.begin(), a.end(), greater<int>());  // Sort in descending order

    vector<bool> visited(a.size(), false);
    return canPartition(0, a, visited, k, 0, target_sum);
    }
};
