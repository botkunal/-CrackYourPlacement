class Solution {
public:
    int uniquePathsIII(vector<vector<int>>& grid) {
        int x,y,total0=0;

        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==1){
                    x=i;y=j;
                }
                else if(grid[i][j]==0){
                    total0++;
                }
            }
        }
        int paths=0;
        dfs(grid,x,y,total0+1,paths);
        return paths;
    }
private:
    void dfs(vector<vector<int>>& grid, int x, int y, int remaining, int& paths){
        if(x<0 || x>=grid.size() || y<0 || y>=grid[0].size() || grid[x][y]==-1){
            return;
        }
        if(grid[x][y]==2){
            if(remaining==0){
                paths++;
            }
            return;
        }
        int temp=grid[x][y];
        grid[x][y]=-1;

        dfs(grid,x+1,y,remaining-1,paths);
        dfs(grid,x-1,y,remaining-1,paths);
        dfs(grid,x,y+1,remaining-1,paths);
        dfs(grid,x,y-1,remaining-1,paths);

        grid[x][y]=temp;
    }
};
