 // Min-heap priority queue to select the edge with the minimum weight
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    
    // Array to keep track of minimum edge weight to a vertex (initially set to infinity)
    vector<int> key(V, INT_MAX);
    
    // Boolean array to track vertices included in MST
    vector<bool> inMST(V, false);
    
    // Start from the first vertex (index 0)
    key[0] = 0;
    pq.push({0, 0});  // (weight, vertex)
    
    int sumWeight = 0;  // Sum of weights of the edges in the MST
    
    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();
        
        // If this vertex is already in MST, skip it
        if (inMST[u]) continue;
        
        // Include vertex u in MST
        inMST[u] = true;
        sumWeight += key[u];
        
        // Iterate through all adjacent vertices of u
        for (auto& edge : adj[u]) {
            int v = edge.first;
            int weight = edge.second;
            
            // If v is not in MST and weight of (u,v) is smaller than the current key value of v
            if (!inMST[v] && weight < key[v]) {
                key[v] = weight;
                pq.push({key[v], v});
            }
        }
    }
    
    return sumWeight;
