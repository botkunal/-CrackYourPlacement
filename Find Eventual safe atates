class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
    int n = graph.size();
    vector<vector<int>> reverseGraph(n);
    vector<int> outdegree(n, 0);
    queue<int> q;
    vector<int> safeNodes;
    
    // Create the reverse graph and count the outdegrees
    for (int i = 0; i < n; ++i) {
        for (int node : graph[i]) {
            reverseGraph[node].push_back(i);
        }
        outdegree[i] = graph[i].size();
    }
    
    // Add terminal nodes (nodes with 0 outdegree) to the queue
    for (int i = 0; i < n; ++i) {
        if (outdegree[i] == 0) {
            q.push(i);
        }
    }
    
    // Process nodes in the queue
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        safeNodes.push_back(node);
        
        for (int neighbor : reverseGraph[node]) {
            --outdegree[neighbor];
            if (outdegree[neighbor] == 0) {
                q.push(neighbor);
            }
        }
    }
    
    // Sort the safe nodes in ascending order
    sort(safeNodes.begin(), safeNodes.end());
    
    return safeNodes;
}
};
