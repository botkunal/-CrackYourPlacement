class Solution {
private:
    int dijkstra(vector<vector<pair<int,int>>>& graph,int src,int dst,int k){
        vector<vector<int>> dist(graph.size(),vector<int>(k+2,INT_MAX));
        using T = tuple<int,int,int>;
        priority_queue<T,vector<T>,greater<>> minHeap;

        dist[src][k+1]=0;
        minHeap.emplace(dist[src][k+1],src,k+1);

        while(!minHeap.empty()){
            auto [s,e,stops]=minHeap.top();
            minHeap.pop();
            if(e==dst) return s;
            if(stops==0) continue;
            for(auto& [v,w]:graph[e])
                if(s+w<dist[v][stops-1]){
                    dist[v][stops-1]=s+w;
                    minHeap.emplace(dist[v][stops-1],v,stops-1);
                }
        }
        return -1;
    }
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<vector<pair<int,int>>> graph(n);
        for(vector<int>& flight: flights)
            graph[flight[0]].emplace_back(flight[1],flight[2]);
        
        return dijkstra(graph,src,dst,k);
    }
};
