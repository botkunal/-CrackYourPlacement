class Solution {
public:  
    int maxDistance(vector<vector<int>>& grid) {
        int n=grid.size();
        queue<pair<int,int>> q;
        // Add all land cell in queue
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    q.push({i,j});
                }
            }
        }

        int maxDist=-1;
        vector<int> directions={-1,0,1,0,-1};

        while(!q.empty()){
            int x=q.front().first;
            int y=q.front().second;
            q.pop();
            // explore all four directions
            for(int i=0;i<4;i++){
                int newX = x+directions[i];
                int newY = y+directions[i+1];
                // if it is in grod and is water
                if(newX>=0 && newX<n && newY>=0 && newY<n && grid[newX][newY]==0){
                    grid[newX][newY]=grid[x][y]+1;  //update water cells
                    maxDist=max(maxDist,grid[newX][newY]-1);    //add distance
                    q.push({newX,newY});    //add new land cell
                }
            }
        }
        return maxDist;
    }
};
